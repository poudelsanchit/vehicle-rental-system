generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id         String   @id @default(uuid())
  username   String   @unique
  email      String   @unique
  password   String
  role       Role     @default(USER)
  isVerified Boolean  @default(false)
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  // Relations
  kyc      KYC?
  vehicles Vehicle[]
  bookings Booking[]
}

model KYC {
  id     String @id @default(uuid())
  userId String @unique
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  // Personal Info
  fullName         String
  dateOfBirth      DateTime
  gender           Gender
  nationality      String
  phoneNumber      String
  currentAddress   String
  permanentAddress String?

  // Documents - All users
  profilePhotoUrl      String?
  identityType         IdentityDocType // NID/Citizenship
  identityNumber       String
  identityPhotoUrl     String // Front photo
  identityBackPhotoUrl String? // Back photo if applicable

  // Driver's License - For renters
  licenseNumber        String?
  licenseExpiryDate    DateTime?
  licenseFrontPhotoUrl String?
  licenseBackPhotoUrl  String?

  // Emergency Contact
  emergencyContactName     String
  emergencyContactPhone    String
  emergencyContactRelation String

  // Verification
  status          KYCStatus @default(PENDING)
  rejectionReason String?
  verifiedAt      DateTime?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Vehicle {
  id     String @id @default(uuid())
  userId String
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  // Basic Info
  title           String
  brand           String
  model           String
  year            Int
  type            VehicleType
  transmission    TransmissionType
  fuelType        FuelType
  color           String
  seatingCapacity Int

  // Registration & Rental
  registrationNumber String  @unique
  pricePerDay        Float
  available          Boolean @default(true)
  pickupLocation     String

  // Documents
  bluebookImage          String
  insuranceDocumentImage String
  insuranceValidTill     DateTime

  // Photos
  vehicleFrontPhoto    String
  vehicleBackPhoto     String
  vehicleInteriorPhoto String
  vehicleSidePhoto     String

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  bookings Booking[]

  @@index([userId])
  @@index([available])
}

model Booking {
  id        String @id @default(uuid())
  userId    String
  vehicleId String
  
  user    User    @relation(fields: [userId], references: [id], onDelete: Cascade)
  vehicle Vehicle @relation(fields: [vehicleId], references: [id], onDelete: Cascade)

  // Booking Details
  startDate    DateTime
  endDate      DateTime
  totalDays    Int
  totalAmount  Float
  status       BookingStatus @default(PENDING)

  // Contact Info
  contactPhone String
  pickupTime   String
  
  // Additional Info
  specialRequests String?
  
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([userId])
  @@index([vehicleId])
  @@index([status])
}

enum Role {
  ADMIN
  OWNER
  USER
}

enum Gender {
  MALE
  FEMALE
  OTHER
}

enum IdentityDocType {
  NATIONAL_ID
  CITIZENSHIP
  PASSPORT
}

enum KYCStatus {
  PENDING
  APPROVED
  REJECTED
}

enum VehicleType {
  CAR
  BIKE
  SUV
  VAN
  TRUCK
}

enum TransmissionType {
  MANUAL
  AUTOMATIC
}

enum FuelType {
  PETROL
  DIESEL
  ELECTRIC
  HYBRID
}

enum BookingStatus {
  PENDING
  CONFIRMED
  CANCELLED
  COMPLETED
}
